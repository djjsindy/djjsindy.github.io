<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>djjsindy</title><link href="/" rel="alternate"></link><link href="/feeds/ptmalloc.atom.xml" rel="self"></link><id>/</id><updated>2014-02-21T16:34:00+01:00</updated><entry><title>ptmalloc free过程</title><link href="/ptmalloc-freeguo-cheng.html" rel="alternate"></link><updated>2014-02-21T16:34:00+01:00</updated><author><name>djjsindy</name></author><id>tag:,2014-02-21:ptmalloc-freeguo-cheng.html</id><summary type="html">&lt;h1&gt;ptmalloc free过程&lt;/h1&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ptmalloc free函数并不是直接释放占用的空间给操作系统，在一些情况下才会释放给操作系统。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;释放的&lt;code&gt;malloc_chunk&lt;/code&gt;中的空间是由mmap函数分配的，那么free的时候直接调用unmmap函数返还给操作系统。&lt;/li&gt;
&lt;li&gt;释放的&lt;code&gt;malloc_chunk&lt;/code&gt;经过虚拟地址相邻空闲的进行合并，最后合并后的size&amp;gt;&lt;code&gt;FASTBIN_CONSOLIDATION_THRESHOLD&lt;/code&gt;，并且top chunk的size&amp;gt;trim_threshold，这时就可以收缩top chunk了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;从上面的情况可以看出，第一种调整mmap_threshold的大小，使得大于mmap_threshold的malloc请求都去使用mmap分配内存，同时释放的时候，直接unmmap返回给操作系统，如果这个值调的很大，会导致内存长期不回收。如果设置的太小，导致malloc中缓存的chunk会过少，malloc会多次调用mmap函数。第二种情况&lt;code&gt;FASTBIN_CONSOLIDATION_THRESHOLD&lt;/code&gt;固定位64k，trim_threshold能通过mallopt函数进行设定。&lt;/p&gt;
&lt;p&gt;free函数的整体流程：
&lt;img src="https://lh6.googleusercontent.com/-elZ4iYV1BJo/UwMdA7Vf1qI/AAAAAAAAAOg/wdkkhUXN2xk/s640/Screen%2520Shot%25202014-02-18%2520at%25204.42.12%2520PM.png"/&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这里说一下最后的内存回收过程，如果当前分配的是main area，那么当回收的chunk经过合并最后的size大于&lt;code&gt;FASTBIN_CONSOLIDATION_THRESHOLD&lt;/code&gt;，并且top chunk的大小大于trim_threshold，就对top chunk的内存进行回收，因为这种chunk分配内存都是通过sbrk，brk函数，而brk函数进行回收内存，调整指针，只能从分配的最顶处进行调整，不能从中间开始，如果能任意调整brk，那么brk当前指针之上的空间，就没法处理了，所以只能调整top chunk，回收内存会调用systrim函数，如果是其他的area（关于area以后再讲），直接调用heap_trim函数。&lt;/p&gt;</summary><category term="ptmalloc"></category></entry><entry><title>malloc_chunk边界标记法</title><link href="/malloc_chunkbian-jie-biao-ji-fa.html" rel="alternate"></link><updated>2014-02-17T10:04:00+01:00</updated><author><name>djjsindy</name></author><id>tag:,2014-02-17:malloc_chunkbian-jie-biao-ji-fa.html</id><summary type="html">&lt;h1&gt;malloc_chunk边界标记法和空间复用&lt;/h1&gt;
&lt;h3&gt;边界标记法&lt;/h3&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ptmalloc分配的空间统一用了&lt;code&gt;malloc_chunk&lt;/code&gt;结构来管理，&lt;code&gt;malloc_chunk&lt;/code&gt;的结构初看比较奇葩，看了注释，分析了一段时间的代码，发现这种边界标记的设计，在&lt;code&gt;malloc_chunk&lt;/code&gt;虚拟地址都是彼此相邻的情况下，是十分高效的。&lt;/p&gt;
&lt;p&gt;malloc_chunk结构：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
struct malloc_chunk {

  INTERNAL_SIZE_T      prev_size;  /* Size of previous chunk (if free).  */
  INTERNAL_SIZE_T      size;       /* Size in bytes, including overhead. */ //整个结构体的大小，包括结构体数据和后面可用的空间的大小

  struct malloc_chunk* fd;         /* double links -- used only if free. */
  struct malloc_chunk* bk;

  /* Only used for large blocks: pointer to next larger size.  */ //后面用large bin再考虑
  struct malloc_chunk* fd_nextsize; /* double links -- used only if free. */
  struct malloc_chunk* bk_nextsize;
};

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;首先我们要清楚，&lt;code&gt;malloc_chunk&lt;/code&gt;都是虚拟地址相连的，这样我们需要知道一个chunk相邻chunk的地址。每个&lt;code&gt;malloc_chunk&lt;/code&gt;都包括自身的size，又包括虚拟地址前面的那个&lt;code&gt;malloc_chunk&lt;/code&gt;，这里不需要记录后面&lt;code&gt;malloc_chunk&lt;/code&gt;的size，因为后面的首地址就是当前&lt;code&gt;malloc_chunk&lt;/code&gt;的首地址+size,prev_size在前面的chunk如果是空闲的时候才是可用的。如果前面的chunk是正在被使用的，那么这个prev_size的空间则被前面的chunk所征用。如果当前chunk是使用中的，那么fd，bk，fd_nextsize,bk_nextsize,都是无效的，它们都是关于空闲链表的指针，那么这些指针的空间全部被认为是空闲空间。
ptmalloc中的注释画出了空闲&lt;code&gt;malloc_chunk&lt;/code&gt;和已分配的&lt;code&gt;malloc_chunk&lt;/code&gt;的结构。&lt;/p&gt;
&lt;p&gt;空闲chunk的结构：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://lh4.googleusercontent.com/-1pSfo0l9rfM/UwGIMQatOqI/AAAAAAAAANo/c_U-cY6RNZo/s576/Screen%2520Shot%25202014-02-17%2520at%252011.53.46%2520AM.png" /&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;上图中是空闲chunk的结构示意图，从图中可以看出当前&lt;code&gt;malloc_chunk&lt;/code&gt;的指针是chunk指针，如果想得到地址相邻前面的指针，只需要chunk-prev_size即可。得到地址相邻后面的指针，chunk+size。其中fd，bk指针是bin中的空闲双向链表。这种通过prev_size可以使&lt;code&gt;malloc_chunk&lt;/code&gt;的合并过程非常迅速。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;从代码中看下空闲chunk的合并过程，还是malloc_consolidate里面函数的片段：
&lt;pre&gt;&lt;code&gt;
//合并前面的
      if (!prev_inuse(p)) {
        prevsize = p-&amp;gt;prev_size;
        size += prevsize;
        p = chunk_at_offset(p, -((long) prevsize));
        unlink(p, bck, fwd);
      }
//合并后面的
      if (nextchunk != av-&amp;gt;top) {
        nextinuse = inuse_bit_at_offset(nextchunk, nextsize);
        if (!nextinuse) {
          size += nextsize;
          unlink(nextchunk, bck, fwd);&lt;/p&gt;
&lt;p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;从代码中可以看出来，合并前面的&lt;code&gt;malloc_chunk&lt;/code&gt;过程中，可以看到不用获得前面&lt;code&gt;malloc_chunk&lt;/code&gt;的指针,合并的过程大概就是当前的chunk指针挪动到前面的位置，同时更新size，把chunk指针从相应的bin双向链表中干掉；从合并过程中可以看到，我们只是用到了prev_size,并没有用前面的chunk的指针，如果有前面chunk的指针，那么合并过程肯定还是需要这个chunk的size的。所以这里只用到prev_size加快合并的速度。向prev方向合并需要更新size和chunk指针，向next方向合并，只要更新size就行。&lt;/p&gt;
&lt;h3&gt;空间复用&lt;/h3&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;code&gt;malloc_chunk&lt;/code&gt;来说size是必须的，标志了这个chunk的大小，来决定是否满足malloc的要求，那么对于空闲的&lt;code&gt;malloc_chunk&lt;/code&gt;来说fd，bk，fd_nextsize，bk_nextsize是必须的，bin中的空闲双链表；对于非空闲的&lt;code&gt;malloc_chunk&lt;/code&gt;来说，fd,bk,fd_nextsize，bk_nextsize是没有用的，所以这部分空间被作为了可用的空间。那么prev_size就比较复杂了，它的状态取决于虚拟地址相邻前面的chunk的状态，如果前面的chunk是使用状态，那么这个chunk的prev_size就没有意义了，也没有合并的必要了，所以就不需要知道前面chunk指针的位置了，所以这个变量的空间被前面的chunk征用了。&lt;/p&gt;
&lt;p&gt;使用状态的chunk&lt;/p&gt;
&lt;p&gt;&lt;img src="https://lh4.googleusercontent.com/-i7Vzczuhyh8/UwGyXJVSVgI/AAAAAAAAAOQ/NOAQtpjdznk/s828/Screen%2520Shot%25202014-02-17%2520at%25202.55.09%2520PM.png" height=300/&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;malloc请求的size，要加上结构体的数据大小才和&lt;code&gt;malloc_chunk&lt;/code&gt;的size有可比性。
 &lt;pre&gt;&lt;code&gt;
 #define request2size(req)                                       &lt;br /&gt;
  (((req) + SIZE_SZ + MALLOC_ALIGN_MASK &amp;lt; MINSIZE)  ?           &lt;br /&gt;
   MINSIZE :                                                    &lt;br /&gt;
   ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) &amp;amp; ~MALLOC_ALIGN_MASK)
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;从上面的宏可以看出实际请求的大小是req再加上size_t然后对齐，这里prev_size和size不是应该2*size_t么，但是还要计算上next chunk赠送的prev_size的size_t。&lt;/p&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;从上面的分析可以看出&lt;code&gt;malloc_chunk&lt;/code&gt;设计是巧妙的，prev_size字段可以通过它来找到地址相邻空闲的上一个chunk,使得合并空闲的chunk十分方便，同时如果当前chunk的前一个chunk是使用中的，prev_size的空间可以借给上一个chunk作为可用空间。&lt;/p&gt;</summary><category term="ptmalloc"></category></entry><entry><title>ptmalloc中的fastbin chunk的合并过程</title><link href="/ptmalloczhong-de-fastbin-chunkde-he-bing-guo-cheng.html" rel="alternate"></link><updated>2014-02-17T10:04:00+01:00</updated><author><name>djjsindy</name></author><id>tag:,2014-02-17:ptmalloczhong-de-fastbin-chunkde-he-bing-guo-cheng.html</id><summary type="html">&lt;h1&gt;ptmalloc中的fastbin chunk的合并过程&lt;/h1&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最近在设计一个memcache协议队列的内存管理模块，其实&lt;code&gt;malloc&lt;/code&gt;和&lt;code&gt;free&lt;/code&gt;并不是想象中的那种，&lt;code&gt;malloc&lt;/code&gt;完空间&lt;code&gt;free&lt;/code&gt;就会马上把内存返回给操作系统，所以了解一下glibc 中malloc和free函数的实现是十分必要的。了解了glibc中&lt;code&gt;malloc&lt;/code&gt;实现原理对于设计一个自己的内存管理模块是十分有意义的，可以从中学到很多的优良设计。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;glibc中&lt;code&gt;malloc&lt;/code&gt;类函数的实现是ptmalloc，分配内存大致思想就是依赖于底层&lt;code&gt;brk&lt;/code&gt;或者&lt;code&gt;mmap&lt;/code&gt;系统调用，来开辟新的地址空间，&lt;code&gt;free&lt;/code&gt;函数会把释放的地址空间放到不同的容器中，fastbin存放的都是一些&lt;code&gt;free&lt;/code&gt;后小的地址空间，具体这个阈值是可以&lt;code&gt;mallopt&lt;/code&gt;函数进行配置的，默认的size_t*16字节。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;分配出的地址空间的结构体是&lt;code&gt;malloc_chunk&lt;/code&gt;，而&lt;code&gt;malloc_chunk&lt;/code&gt;按照所存储的地址空间的大小，存放在不同的容器中，有fastbin，small bin，unsorted bin ,large bin,但是本文只分析small bin和fast bin&lt;/p&gt;
&lt;p&gt;fastbin结构图：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://lh4.googleusercontent.com/-EEFeehsWSp0/Uv19DpYYahI/AAAAAAAAAM4/rfPLFp-gk9I/s800/Screen%2520Shot%25202014-02-14%2520at%252010.16.03%2520AM.png" height="300"/&gt;&lt;/p&gt;
&lt;p&gt;smallbin结构图：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://lh4.googleusercontent.com/--MnFI0y8sDI/Uv2InfaFz6I/AAAAAAAAANY/NnjZzvrTP_8/s912/Screen%2520Shot%25202014-02-14%2520at%252011.05.00%2520AM.png" height="370"/&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;从上面两张图可以看出都是由数组＋双向链表构成，fast bin缓存16B－64B大小的&lt;code&gt;malloc _chunk&lt;/code&gt;，而small bin缓存的是16B－511B大小的&lt;code&gt;malloc_chunk&lt;/code&gt;，这两个bin存储的&lt;code&gt;malloc_chunk&lt;/code&gt;大小是有重叠的，fast bin存在的意义就在于非fast bin中&lt;code&gt;malloc_chunk&lt;/code&gt;在free的时候，如果这个chunk前后的chunk是空闲的，那么这个chunk会合并，然后放到unsort bin中，这里需要注意的是这个前后，并不是指的是&lt;code&gt;malloc_chunk&lt;/code&gt;双向链表的prev和next，而是虚拟地址空间前后，试想malloc函数肯定是通过brk或者mmap分配一段虚拟地址空间，然后从这个大地址空间根据malloc大小切割地址空间，所以这样在地址空间相邻的&lt;code&gt;malloc_chunk&lt;/code&gt;才能彼此合并。双向链表的前后元素在地址空间上根本不能保证相邻。在合并的过程中肯定会判断地址空间相邻的&lt;code&gt;malloc_chunk&lt;/code&gt;是否是空闲，如果不是空闲，那么肯定是被malloc函数分配出去了，还有一种可能就是fast bin中的&lt;code&gt;malloc_chunk&lt;/code&gt;。fast bin中malloc_chunk的特点就是不会清除空闲标志，free chunk之后直接放到了fast bin中，并且保证不会被合并。保证了&lt;code&gt;malloc_chunk&lt;/code&gt;空闲容器中会存在这种小的地址空间，方便malloc快速分配小地址空间。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;通过上面的分析，如果malloc函数请求的大小小于等于64B，那么首先会去fast bin中找合适的&lt;code&gt;malloc_chunk&lt;/code&gt;，这样malloc的速度会大大加快，主要是fast bin中&lt;code&gt;malloc_chunk&lt;/code&gt;保证了不会其他容器的&lt;code&gt;malloc_chunk&lt;/code&gt;被合并。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;通过代码分析一下，在free &lt;code&gt;malloc_chunk&lt;/code&gt;的过程中会尝试与地址空间相邻的空闲的&lt;code&gt;malloc_chunk&lt;/code&gt;进行合并(fast bin 中的chunk不清除inuse状态)。&lt;/p&gt;
&lt;p&gt;free函数片段&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* consolidate backward */&lt;/span&gt;  &lt;span class="c1"&gt;//如果前面的chunk空闲，合并前面的chunk&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;prev_inuse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;prevsize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;prev_size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;prevsize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chunk_at_offset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;prevsize&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;//必须更新这个chunk的首地址&lt;/span&gt;
  &lt;span class="n"&gt;unlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bck&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fwd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nextchunk&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;av&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* get and clear inuse bit */&lt;/span&gt;
  &lt;span class="n"&gt;nextinuse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inuse_bit_at_offset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nextchunk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nextsize&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="cm"&gt;/* consolidate forward */&lt;/span&gt;  &lt;span class="c1"&gt;//判断后面的chunk是否空闲&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;nextinuse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;unlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nextchunk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bck&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fwd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//如果空闲，不需要在改变首地址了，只需要更新size&lt;/span&gt;
    &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;nextsize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="n"&gt;clear_inuse_bit_at_offset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nextchunk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//如果后面的chunk在用，更新标志。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;为什么上面的chunk只关心相邻的chunk，不用再去递归再相邻的chunk了，因为相邻的chunk如果它的周围还是空闲的，那么之前的free过程肯定会去合并他们，所以这里根本不用考虑那种情况。在fast bin中我们不必担心&lt;code&gt;malloc_chunk&lt;/code&gt;中的空闲状态，这个状态只是给合并操作看的，告诉不要合并它们。任何容器中的chunk都是空闲的。一旦被malloc函数所征用，会移除容器的。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;那么fast bin中的chunk也不是一成不变的，在一些情况下fast bin中的chunk也会被merge移动到unsort bin中，其中fast bin的chunk会参考相邻的chunk，如果是空闲的就会被fast bin中的chunk所合并，然后移动到unsort bin中。也就是说有一些除了fast bin中彼此虚拟地址空间相邻的被合并到unsort bin，small bin或者large bin中的一些和fast bin地址相邻的chunk合并到unsort bin，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;如果size是small bin中的，对应的链表没有chunk，那么会合并一下fast bin中的chunk,这样有可能产生满足chunk。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果size是large bin中的，直接合并一下fast bin中的chunk，注释上说避免fast bin中太多碎片，很有可能在合并过后，分配到了large bin中，正是我们所需要的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在调用brk或者mmap函数之前会最后一次尝试合并一下fast bin中chunk。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在free函数的最后，如果free的&lt;code&gt;malloc_chunk&lt;/code&gt;和虚拟地址空间相邻的空闲chunk合并后的size&amp;gt;    &lt;code&gt;FASTBIN_CONSOLIDATION_THRESHOLD&lt;/code&gt;,那么会合并fast bin中的chunk，目的是更新top chunk的指针，因为fast bin中&lt;code&gt;malloc_chunk&lt;/code&gt;都是使用状态，这样合并后，会更新top chunk的指针，因为合并操作会合并地址空间相邻的chunk，如果chunk的next是top chunk指针，说明可以更新top chunk指针了，这样更有利于释放空间到系统。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面看下合并fast bin中&lt;code&gt;malloc_chunk&lt;/code&gt;的代码：
&lt;pre&gt;&lt;code&gt;
static void malloc_consolidate(mstate av)
{
  mfastbinptr&lt;em&gt;    fb;                 /&lt;/em&gt; current fastbin being consolidated &lt;em&gt;/
  mfastbinptr&lt;/em&gt;    maxfb;              /&lt;em&gt; last fastbin (for loop control) &lt;/em&gt;/
  mchunkptr       p;                  /&lt;em&gt; current chunk being consolidated &lt;/em&gt;/
  mchunkptr       nextp;              /&lt;em&gt; next chunk to consolidate &lt;/em&gt;/
  mchunkptr       unsorted_bin;       /&lt;em&gt; bin header &lt;/em&gt;/
  mchunkptr       first_unsorted;     /&lt;em&gt; chunk to link to &lt;/em&gt;/&lt;/p&gt;
&lt;p&gt;/&lt;em&gt; These have same use as in free() &lt;/em&gt;/
  mchunkptr       nextchunk;
  INTERNAL_SIZE_T size;
  INTERNAL_SIZE_T nextsize;
  INTERNAL_SIZE_T prevsize;
  int             nextinuse;
  mchunkptr       bck;
  mchunkptr       fwd;&lt;/p&gt;
&lt;p&gt;/&lt;em&gt;
     If max_fast is 0, we know that av hasn't
     yet been initialized, in which case do so below
   &lt;/em&gt;/&lt;/p&gt;
&lt;p&gt;if (get_max_fast () != 0) {  //表示已经初始化过了
    clear_fastchunks(av);
    unsorted_bin = unsorted_chunks(av); 
    maxfb = &amp;amp;fastbin (av, NFASTBINS - 1);
    fb = &amp;amp;fastbin (av, 0);
    //开始递归fastbin每一个双向链表的每一个元素，第一层递归每一个链表，第二层递归链表中每一个元素
    do {
      p = atomic_exchange_acq (fb, 0);
      if (p != 0) {
        do {
          check_inuse_chunk(av, p);
          nextp = p-&amp;gt;fd;
          size = p-&amp;gt;size &amp;amp; ~(PREV_INUSE|NON_MAIN_ARENA);
          nextchunk = chunk_at_offset(p, size);
          nextsize = chunksize(nextchunk);
          //如果虚拟地址空间的前一个chunk是空闲的，就开始合并到当前chunk中，同时更新size，和p指针，把前一个chunk从它的链表中摘除
          if (!prev_inuse(p)) {
            prevsize = p-&amp;gt;prev_size;
            size += prevsize;
            p = chunk_at_offset(p, -((long) prevsize));
            unlink(p, bck, fwd);
          }
          //判断next chunk是否是top chunk，就是说判断当前chunk的虚拟地址空间的后面是否是top chunk的初始地址。
          if (nextchunk != av-&amp;gt;top) {
            nextinuse = inuse_bit_at_offset(nextchunk, nextsize);
            //如果next不是top chunk，那么当前chunk就开始合并next chunk
            if (!nextinuse) {
              size += nextsize;
              unlink(nextchunk, bck, fwd);
            } else
              clear_inuse_bit_at_offset(nextchunk, 0);//如果next chunk不空闲，那么更新它的inuse状态，因为chunk的是否空闲决定于next chunk（chunk的结构决定）
            //放到unsorted bin中
            first_unsorted = unsorted_bin-&amp;gt;fd;
            unsorted_bin-&amp;gt;fd = p;
            first_unsorted-&amp;gt;bk = p;
            if (!in_smallbin_range (size)) {
              p-&amp;gt;fd_nextsize = NULL;
              p-&amp;gt;bk_nextsize = NULL;
            }
            set_head(p, size | PREV_INUSE);
            p-&amp;gt;bk = unsorted_bin;
            p-&amp;gt;fd = first_unsorted;
            set_foot(p, size);
          }
          //如果当前chunk地址空间紧紧挨着top chunk的指针，那么更新top chunk指针就行了，相当于合并了
          else {
            size += nextsize;
            set_head(p, size | PREV_INUSE);
            av-&amp;gt;top = p;
          }
        } while ( (p = nextp) != 0);
      }
    } while (fb++ != maxfb);
  }
  else {
    malloc_init_state(av);
    check_malloc_state(av);
  }
}&lt;/p&gt;
&lt;p&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ptmalloc的分配中，fast bin中chunk，通过不清除inuse状态位，防止了free函数，被动的把fast bin中的chunk合并到其他bin中，大大加速连续小块内存分配的速度；fast bin中的chunk在一定条件是还是会被合并到unsorted bin中，然后分配到small bin或者large bin中的，减少内存碎片，有机会满足大块内存的请求。&lt;/p&gt;</summary><category term="ptmalloc"></category></entry></feed>